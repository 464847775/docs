import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.CbPyf0Of.js";const E=JSON.parse('{"title":"开发指引","description":"","frontmatter":{},"headers":[],"relativePath":"guide.md","filePath":"guide.md"}'),l={name:"guide.md"},e=n(`<h1 id="开发指引" tabindex="-1">开发指引 <a class="header-anchor" href="#开发指引" aria-label="Permalink to &quot;开发指引&quot;">​</a></h1><h2 id="环境要求" tabindex="-1">环境要求 <a class="header-anchor" href="#环境要求" aria-label="Permalink to &quot;环境要求&quot;">​</a></h2><ul><li>node 版本要求，建议安装<a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer">nvm</a>管理</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&quot;engines&quot;: {</span></span>
<span class="line"><span>    &quot;node&quot;: &quot;^18.0.0 || &gt;=20.0.0&quot;  # node版本18 或 &gt; 20</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//建议使用以下nvm命令将nvm默认设置为所需版本</span></span>
<span class="line"><span>nvm alias default vxx.xx</span></span></code></pre></div><ul><li>yarn</li><li>编辑器 <ul><li>推荐使用vscode</li><li>vscode需要安装 eslint + stylelint 插件</li></ul></li></ul><h2 id="包管理" tabindex="-1">包管理 <a class="header-anchor" href="#包管理" aria-label="Permalink to &quot;包管理&quot;">​</a></h2><pre><code>使用 yarn 进行包管理
</code></pre><h2 id="启动运行项目" tabindex="-1">启动运行项目 <a class="header-anchor" href="#启动运行项目" aria-label="Permalink to &quot;启动运行项目&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yarn</span></span>
<span class="line"><span>yarn start # 需要做出选择 1. 运行的端 2. 环境 3. 调试/编译，按照提示选择需要运行的场景，如：h5 + sit + 调试</span></span></code></pre></div><h2 id="相关库文档" tabindex="-1">相关库文档 <a class="header-anchor" href="#相关库文档" aria-label="Permalink to &quot;相关库文档&quot;">​</a></h2><ol><li>基础能力可参考<a href="https://taro-docs.jd.com/docs/guide" target="_blank" rel="noreferrer">taro 教程</a></li><li>ui 组件可先到<a href="https://taro-ui.jd.com/#/docs/introduction" target="_blank" rel="noreferrer">taro-ui</a>库查找是否有可使用组件</li><li>使用 hooks 能力，可先到<a href="https://next-taro-hooks.pages.dev/site/hooks/intro" target="_blank" rel="noreferrer">taro-hooks</a>了解是否有可用实现</li><li>全局状态管理<a href="https://awesomedevin.github.io/zustand-vue/docs/introduce/what-is-zustand" target="_blank" rel="noreferrer">zustand</a></li></ol><h2 id="新增页面、组件" tabindex="-1">新增页面、组件 <a class="header-anchor" href="#新增页面、组件" aria-label="Permalink to &quot;新增页面、组件&quot;">​</a></h2><p>项目提供了快速创建模板页面/组件的脚本，按照脚本提示可以方便的新增</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 1.运行以下命令</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yarn auto</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 选择创建 页面/ 组件</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 按要求格式输入创建的 页面/组件 文件名称</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 按要求格式输入 页面/组件 中文名称</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 按要求格式输入 页面/组件 描述</span></span></code></pre></div><h2 id="项目编码规范" tabindex="-1">项目编码规范 <a class="header-anchor" href="#项目编码规范" aria-label="Permalink to &quot;项目编码规范&quot;">​</a></h2><div class="tip custom-block" style="padding-top:8px;"> 规范还在进一步完善中，待引入检测及lint机制 </div><ul><li>page 文件命名 形如: aa-bb</li><li>component 文件命名 形如: AaBb</li><li>组件标签书写：无子元素使用单闭合标签书写</li><li>文件内导出建议不要使用匿名导出</li></ul><h2 id="样式" tabindex="-1">样式 <a class="header-anchor" href="#样式" aria-label="Permalink to &quot;样式&quot;">​</a></h2><ul><li>单位：样式默认使用 px，设计稿以宽度 750px 为标准</li><li>UI 库：<a href="https://taro-ui.jd.com/#/docs/introduction" target="_blank" rel="noreferrer">taro-ui</a> (注意: 部分组件不支持 RN 端)</li><li>主题：taro-ui 暂不支持动态 css 变量，故暂时无法实现主题切换功能</li><li>全局样式</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>    .</span></span>
<span class="line"><span>    ├─ src</span></span>
<span class="line"><span>        └─ styles</span></span>
<span class="line"><span>            └─ custom-variables.scss # ui主题变量覆盖、自定义scss变量</span></span>
<span class="line"><span>            └─ global.scss # 全局样式定义文件</span></span></code></pre></div><ul><li>页面/组件样式： 默认写到页面/组件文件夹 index.scss 中即可</li></ul><h2 id="typescript-类型定义" tabindex="-1">typescript 类型定义 <a class="header-anchor" href="#typescript-类型定义" aria-label="Permalink to &quot;typescript 类型定义&quot;">​</a></h2><h4 id="全局类型定义" tabindex="-1">全局类型定义 <a class="header-anchor" href="#全局类型定义" aria-label="Permalink to &quot;全局类型定义&quot;">​</a></h4><p>如需要定义顶层变量如 window 等，须在以下文件定义</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>## 配置文件</span></span>
<span class="line"><span>.</span></span>
<span class="line"><span>├─ typings</span></span>
<span class="line"><span>└─ global.d.ts # 全局类型定义</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>## 示例</span></span>
<span class="line"><span></span></span>
<span class="line"><span>declare global {</span></span>
<span class="line"><span>    const env: string;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="三方库类型定义拓展" tabindex="-1">三方库类型定义拓展 <a class="header-anchor" href="#三方库类型定义拓展" aria-label="Permalink to &quot;三方库类型定义拓展&quot;">​</a></h4><p>部分场景引入的三方库类型定义需要被拓展，这个时候就需要在三方库基础上添加自定义的类型定义</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>#### 配置文件</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.</span></span>
<span class="line"><span>├─ typings</span></span>
<span class="line"><span>└─ shime-[lib].d.ts # lib 库的类型定义</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;axios&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AxiosRequestConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    loading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    isToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="自写代码类型定义" tabindex="-1">自写代码类型定义 <a class="header-anchor" href="#自写代码类型定义" aria-label="Permalink to &quot;自写代码类型定义&quot;">​</a></h4><h5 id="接口请求参数-返回参数类型定义" tabindex="-1">接口请求参数/返回参数类型定义 <a class="header-anchor" href="#接口请求参数-返回参数类型定义" aria-label="Permalink to &quot;接口请求参数/返回参数类型定义&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>#### 在指定的定义文件目录中定义</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.</span></span>
<span class="line"><span>└─ src</span></span>
<span class="line"><span>└─ services</span></span>
<span class="line"><span>└─ typings.d.ts # 接口参数类型定义文件</span></span></code></pre></div><h5 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h5><div class="tip custom-block" style="padding-top:8px;"> 建议根据行数斟酌： 1. 若文件行数本身不多，定义及实现都写到文件中即可 1. 若文件行数过多需要经常上下滑动来书写定义及实现，此时建议将类型拆分到单独文件中 文件命名为typings.d.ts即可 </div><h2 id="网络请求" tabindex="-1">网络请求 <a class="header-anchor" href="#网络请求" aria-label="Permalink to &quot;网络请求&quot;">​</a></h2><ul><li>项目采用 axios + useRequest(taro-hooks) 结合的方式进行实现</li><li>支持的能力： <ul><li>自定义请求头</li><li>自定义拦截器</li><li>自定义错误处理</li><li>useRequest 的能力(如：防抖节流、轮询、错误重试等)，参考：<a href="https://next-taro-hooks.pages.dev/site/hooks/useRequest/" target="_blank" rel="noreferrer">文档</a></li></ul></li></ul><p>新增网络请求步骤</p><ol><li>src/services 目录下新增文件或在现有文件添加 request 方法</li><li>通过 taro hooks 的 useRequest 组合 request 方法的方式使用, 示例如下</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * request 方法定义</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 用户获取access_token</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAuthToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> API</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AuthTokenReq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  API</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.AuthTokenRes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/ces/oauth/oauth2/token&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      grant_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;password&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      client_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TARO_APP_CLIENT_ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      client_secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TARO_APP_CLIENT_SECRET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: code,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      username,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 页面代码使用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAccessToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// data 为正常返回的数据、error可接收作为错误处理、loading可用来做加载态标识</span></span></code></pre></div><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><h4 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h4><p>项目采用 taro<a href="https://docs.taro.zone/docs/env-mode-config/#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%BC%8F" target="_blank" rel="noreferrer">自定义环境变量</a>实现，指定了 5 种 mode 的环境变量配置文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>├─ .env # 默认环境变量</span></span>
<span class="line"><span>├─ .env.bbit  # 测试环境 bbit 环境变量</span></span>
<span class="line"><span>├─ .env.sit  # 测试环境 sit 环境变量</span></span>
<span class="line"><span>├─ .env.uat  # 测试环境 uat 环境变量</span></span>
<span class="line"><span>└─ .env.production # 生产环境 环境变量</span></span></code></pre></div><h4 id="环境变量新增" tabindex="-1">环境变量新增 <a class="header-anchor" href="#环境变量新增" aria-label="Permalink to &quot;环境变量新增&quot;">​</a></h4><p>确认环境变量的使用场景，在相应的配置文件中配置，注意：环境变量需要使用 TARO<em>APP</em> 开头，如： TARO_APP_API</p><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><h2 id="状态管理" tabindex="-1">状态管理 <a class="header-anchor" href="#状态管理" aria-label="Permalink to &quot;状态管理&quot;">​</a></h2><h4 id="注意点" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点&quot;">​</a></h4><ol><li>有多个状态值依赖时且依赖状态值的重渲染不需要重叠，应该使用以下3种方式获取这些状态值</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shallow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zustand/shallow&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Object pick, re-renders the component when either state.nuts or state.honey change</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nuts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">honey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ nuts: state.nuts, honey: state.honey }), shallow)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Array pick, re-renders the component when either state.nuts or state.honey change</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nuts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">honey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [state.nuts, state.honey], shallow)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Mapped picks, re-renders the component when state.treats changes in order, count or keys</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> treats</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.treats), shallow)</span></span></code></pre></div><ol start="2"><li>若是组件需要的都是actions，不需要考虑重渲染问题, 可以使用以下方式不需要使用selector的方式</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// login / logout 都是action</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">logout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useUserStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,53),p=[e];function t(h,k,r,d,o,c){return i(),a("div",null,p)}const u=s(l,[["render",t]]);export{E as __pageData,u as default};
